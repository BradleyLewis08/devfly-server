/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  Technology: "AWS" | "Angular" | "CSS" | "Django" | "Docker" | "GCP" | "GraphQL" | "HTML" | "JavaScript" | "Next" | "Node" | "Python" | "React" | "TypeScript" | "Vue"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Mutation: {};
  Project: { // root type
    coverImage?: string | null; // String
    description?: string | null; // String
    images?: Array<string | null> | null; // [String]
    projectID?: string | null; // ID
    technologies?: Array<NexusGenEnums['Technology'] | null> | null; // [Technology]
    title?: string | null; // String
  }
  Query: {};
  User: { // root type
    email?: string | null; // String
    name?: string | null; // String
    userId?: string | null; // ID
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    signup: NexusGenRootTypes['User']; // User!
  }
  Project: { // field return type
    coverImage: string | null; // String
    description: string | null; // String
    images: Array<string | null> | null; // [String]
    projectID: string | null; // ID
    technologies: Array<NexusGenEnums['Technology'] | null> | null; // [Technology]
    title: string | null; // String
  }
  Query: { // field return type
    user: NexusGenRootTypes['User'] | null; // User
  }
  User: { // field return type
    email: string | null; // String
    name: string | null; // String
    projects: Array<NexusGenRootTypes['Project'] | null> | null; // [Project]
    userId: string | null; // ID
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    signup: 'User'
  }
  Project: { // field return type name
    coverImage: 'String'
    description: 'String'
    images: 'String'
    projectID: 'ID'
    technologies: 'Technology'
    title: 'String'
  }
  Query: { // field return type name
    user: 'User'
  }
  User: { // field return type name
    email: 'String'
    name: 'String'
    projects: 'Project'
    userId: 'ID'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    signup: { // args
      email: string; // String!
      name: string; // String!
      userId: string; // String!
    }
  }
  Query: {
    user: { // args
      userId: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}